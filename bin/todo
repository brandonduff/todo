#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
  require 'todo'
rescue LoadError
  exit 64
end

include GLI::App

program_desc 'Describe your application here'

version Todo::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'List todos for the current week'
switch [:w, :week]

desc 'List todos for the current month'
switch [:m, :month]

desc 'Create a new todo'
arg_name 'Todo text'
command :new, :n do |c|
  c.action do |_global_options, _options, args|
    @tasks.add_task(Todo::TaskBuilder.new(args.join(' ')).build)
    write_tasks
  end
end

desc 'Lists todos'
command :list, :ls do |c|
  c.desc 'List all todos (including done)'
  c.switch [:a, :all]

  c.action do |global_options, options, _args|
    puts Todo::UseCases::ListTodos.new(global_options.merge(options)).perform.join("\n")
  end
end

desc 'Marks the next unfinished todo as done'
arg_name 'Takes a filename'
command :done, :d do |c|
  c.action do |_global_options, _options, _args|
    @tasks.done
    puts @tasks
    puts @tasks.unfinished_tasks
    write_tasks
  end
end

desc 'Clears all done todos'
arg_name 'Takes a filename'

command :clear do |c|
  c.action do |_global_options, _options, _args|
    @tasks.clear
    write_tasks
  end
end

desc 'Unmarks the last done todo as done'
command :undo do |c|
  c.action do |_global_options, _options, _args|
    @tasks.undo
    puts @tasks.unfinished_tasks
  end
end

desc 'Get and set the current day'
arg_name 'New date'
command :day do |c|
  c.action do |_global_options, _options, args|
    if (new_day = args.first)
      Todo::Writer.for(Todo::DayFormatter.format(new_day)).write_to(File.open(current_day_file, 'a+'))
    else
      puts Todo::DayFormatter.format(read_current_day)
    end
  end
end

def current_day_file
  File.join(ENV['HOME'], '.current_day.txt')
end

def read_current_day
  File.exist?(current_day_file) ? File.read(current_day_file).strip : ''
end

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  Dir.mkdir(File.join(ENV['HOME'], 'todos')) unless Dir.exist?(File.join(ENV['HOME'], 'todos'))
  @current_day = Todo::DayFormatter.format(read_current_day)
  @todo_file = File.join(ENV['HOME'], 'todos', "#{Date.parse(@current_day).strftime("%d-%m-%Y")}.txt")
  initial_buffer = task_fetcher(global).task_data
  @tasks = Todo::TaskList.new(StringIO.new(initial_buffer))
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

def write_tasks
  file = File.open(@todo_file, 'a')
  Todo::Writer.for(@tasks).write_to(file)
  file.close
end

def task_fetcher(global)
  fetcher = Todo::TaskListFetcher.new(Date.parse(@current_day))
  if global[:month]
    fetcher.for_month
  elsif global[:week]
    fetcher.for_week
  else
    fetcher
  end
end

exit run(ARGV)
